import unittest
import numpy as np
from otm import ElementoPoligonalIsoparametrico


class TestElementoIsoparametrico(unittest.TestCase):

    def test_test_coordenadas_nos_elemento_referencia(self):
        # Coordenadas dos nós do elemento em função do número de nós
        elems = {3: np.array([[0, 0],
                              [1, 0],
                              [0, 1]]),
                 4: np.array([[-1, -1],
                              [1, -1],
                              [1, 1],
                              [-1, 1]]),
                 5: np.array([[0.309016994374947, 0.951056516295154],
                              [-0.809016994374947, 0.587785252292473],
                              [-0.809016994374947, -0.587785252292473],
                              [0.309016994374947, -0.951056516295154],
                              [1.00000000000000, 0]]),
                 6: np.array([[0.500000000000000, 0.866025403784439],
                              [-0.500000000000000, 0.866025403784439],
                              [-1.00000000000000, 0],
                              [-0.500000000000000, -0.866025403784439],
                              [0.500000000000000, -0.866025403784439],
                              [1.00000000000000, 0]]),
                 7: np.array([[0.623489801858733, 0.781831482468030],
                              [-0.222520933956314, 0.974927912181824],
                              [-0.900968867902419, 0.433883739117558],
                              [-0.900968867902419, -0.433883739117558],
                              [-0.222520933956314, -0.974927912181824],
                              [0.623489801858733, -0.781831482468030],
                              [1.00000000000000, 0]]),
                 8: np.array([[0.707106781186548, 0.707106781186548],
                              [0, 1.00000000000000],
                              [-0.707106781186548, 0.707106781186548],
                              [-1.00000000000000, 0],
                              [-0.707106781186548, -0.707106781186548],
                              [0, -1.00000000000000],
                              [0.707106781186548, -0.707106781186548],
                              [1.00000000000000, 0]]),
                 9: np.array([[0.766044443118978, 0.642787609686539],
                              [0.173648177666930, 0.984807753012208],
                              [-0.500000000000000, 0.866025403784439],
                              [-0.939692620785908, 0.342020143325669],
                              [-0.939692620785908, -0.342020143325669],
                              [-0.500000000000000, -0.866025403784439],
                              [0.173648177666930, -0.984807753012208],
                              [0.766044443118978, -0.642787609686539],
                              [1.00000000000000, 0]]),
                 10: np.array([[0.809016994374947, 0.587785252292473],
                               [0.309016994374947, 0.951056516295154],
                               [-0.309016994374947, 0.951056516295154],
                               [-0.809016994374947, 0.587785252292473],
                               [-1.00000000000000, 0],
                               [-0.809016994374947, -0.587785252292473],
                               [-0.309016994374947, -0.951056516295154],
                               [0.309016994374947, -0.951056516295154],
                               [0.809016994374947, -0.587785252292473],
                               [1.00000000000000, 0]])}

        # Esperado
        for n in elems:
            pontos_esp = elems[n]
            el = ElementoPoligonalIsoparametrico(n)
            self.assertTrue(np.allclose(pontos_esp, el.coordenadas_nos_elemento_isoparametrico()))

        # Erros
        with self.assertRaisesRegex(ValueError, 'Não é possível calcular a posição dos nós de um elemento '
                                                'com menos que 3 nós!'):
            nt = [-1, 0, 1, 2]
            for i in nt:
                ElementoPoligonalIsoparametrico(i)

    def test_num_lados(self):
        dados = range(3, 10)
        for i in dados:
            el = ElementoPoligonalIsoparametrico(i)
            self.assertEqual(i, el.num_nos)


