import unittest
import pathlib
from otm.leitura_arquivos import *
import otm.constantes as cte
import numpy as np


class TestLeituraArquivos(unittest.TestCase):
    # Caminho do arquivo da estrutura
    path_estrutura = pathlib.Path(__file__).parent.joinpath('exemplos_testes')

    def test_ler_arquivo_entrada_dados_numpy(self):
        arq_modelo1 = self.path_estrutura.joinpath('modelo1.zip')

        # Arquivo .npy
        # Nós
        nos = ler_arquivo_entrada_dados_numpy(arq_modelo1, 1)

        # Nós esperados
        nos_esp = np.array([[0.0, 0.0],
                            [0.0, 0.4],
                            [0.4, 0.0],
                            [0.4, 0.4],
                            [0.8, 0.0],
                            [0.8, 0.4],
                            [1.2, 0.0],
                            [1.2, 0.4]])

        self.assertTrue(np.allclose(nos, nos_esp))

        # Arquivo .npz
        # Matrizes de rigidez dos elementos
        kelems = ler_arquivo_entrada_dados_numpy(arq_modelo1, 7)

        # Matriz esperada
        kelems_esp = [np.array([[243055.55555556, 78125., -138888.88888889, -26041.66666667, -121527.77777778, -78125.,
                                 17361.11111111, 26041.66666667],
                                [78125., 243055.55555556, 26041.66666667, 17361.11111111, -78125., -121527.77777778,
                                 -26041.66666667, -138888.88888889],
                                [-138888.88888889, 26041.66666667, 243055.55555556, -78125., 17361.11111111,
                                 -26041.66666667, -121527.77777778, 78125.],
                                [-26041.66666667, 17361.11111111, -78125., 243055.55555556, 26041.66666667,
                                 -138888.88888889, 78125., -121527.77777778],
                                [-121527.77777778, -78125., 17361.11111111, 26041.66666667, 243055.55555556, 78125.,
                                 -138888.88888889, -26041.66666667],
                                [-78125., -121527.77777778, -26041.66666667, -138888.88888889, 78125., 243055.55555556,
                                 26041.66666667, 17361.11111111],
                                [17361.11111111, -26041.66666667, -121527.77777778, 78125., -138888.88888889,
                                 26041.66666667, 243055.55555556, -78125.],
                                [26041.66666667, -138888.88888889, 78125., -121527.77777778, -26041.66666667,
                                 17361.11111111, -78125., 243055.55555556]]),
                      np.array([[243055.55555556, 78125., -138888.88888889, -26041.66666667, -121527.77777778, -78125.,
                                 17361.11111111, 26041.66666667],
                                [78125., 243055.55555556, 26041.66666667, 17361.11111111, -78125., -121527.77777778,
                                 -26041.66666667, -138888.88888889],
                                [-138888.88888889, 26041.66666667, 243055.55555556, -78125., 17361.11111111,
                                 -26041.66666667, -121527.77777778, 78125.],
                                [-26041.66666667, 17361.11111111, -78125., 243055.55555556, 26041.66666667,
                                 -138888.88888889, 78125., -121527.77777778],
                                [-121527.77777778, -78125., 17361.11111111, 26041.66666667, 243055.55555556, 78125.,
                                 -138888.88888889, -26041.66666667],
                                [-78125., -121527.77777778, -26041.66666667, -138888.88888889, 78125., 243055.55555556,
                                 26041.66666667, 17361.11111111],
                                [17361.11111111, -26041.66666667, -121527.77777778, 78125., -138888.88888889,
                                 26041.66666667, 243055.55555556, -78125.],
                                [26041.66666667, -138888.88888889, 78125., -121527.77777778, -26041.66666667,
                                 17361.11111111, -78125., 243055.55555556]]),
                      np.array([[243055.55555556, 78125., -138888.88888889, -26041.66666667, -121527.77777778, -78125.,
                                 17361.11111111, 26041.66666667],
                                [78125., 243055.55555556, 26041.66666667, 17361.11111111, -78125., -121527.77777778,
                                 -26041.66666667, -138888.88888889],
                                [-138888.88888889, 26041.66666667, 243055.55555556, -78125., 17361.11111111,
                                 -26041.66666667, -121527.77777778, 78125.],
                                [-26041.66666667, 17361.11111111, -78125., 243055.55555556, 26041.66666667,
                                 -138888.88888889, 78125., -121527.77777778],
                                [-121527.77777778, -78125., 17361.11111111, 26041.66666667, 243055.55555556, 78125.,
                                 -138888.88888889, -26041.66666667],
                                [-78125., -121527.77777778, -26041.66666667, -138888.88888889, 78125., 243055.55555556,
                                 26041.66666667, 17361.11111111],
                                [17361.11111111, -26041.66666667, -121527.77777778, 78125., -138888.88888889,
                                 26041.66666667, 243055.55555556, -78125.],
                                [26041.66666667, -138888.88888889, 78125., -121527.77777778, -26041.66666667,
                                 17361.11111111, -78125., 243055.55555556]])]

        for i in range(len(kelems)):
            self.assertTrue(np.allclose(kelems[i], kelems_esp[i]))

        # Testes de exceções
        # Arquivo não suportado pelo numpy
        with self.assertRaisesRegex(ValueError, f'O arquivo "{cte.ARQ_ENTRADA_DADOS[10]}" não é um arquivo '
                                                f'válido do numpy!'):
            ler_arquivo_entrada_dados_numpy(arq_modelo1, 10)

        # Arquivo da estrutura inexistente
        arq_modelo_inexist = 'modelo_inexistente.zip'
        with self.assertRaisesRegex(FileNotFoundError, f'O arquivo "{arq_modelo_inexist}" com os dados da '
                                                       f'estrutura não existe!'):
            ler_arquivo_entrada_dados_numpy(arq_modelo_inexist, 1)

    def test_ler_arquivo_wkb_shapely(self):
        arq_modelo1 = self.path_estrutura.joinpath('modelo1.zip')

        poli = ler_arquivo_wkb_shapely(arq_modelo1, 10)
        poli_esp = 'POLYGON ((0 0, 0 0.4, 1.2 0.4, 1.2 0, 0 0))'

        self.assertEqual(poli.wkt, poli_esp)

        # Teste de exceção
        # Arquivo da estrutura inexistente
        arq_modelo_inexist = 'modelo_inexistente.zip'
        with self.assertRaisesRegex(FileNotFoundError, f'O arquivo "{arq_modelo_inexist}" com os dados da '
                                                       f'estrutura não existe!'):
            ler_arquivo_wkb_shapely(arq_modelo_inexist, 10)
